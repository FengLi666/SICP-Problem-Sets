(load "/Users/fengli/Desktop/SICP Problem Sets/topic 4/lab.scm")
(load "/Users/fengli/Desktop/SICP Problem Sets/topic 4/ds_lab.scm")

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame) (frame-values frame))
  )
)

(define (bound-varible! var val env)
	(let ((frame (first-frame)))
		(define (scan vars vals )
			(cond 
				((null? vars ) 'done)
				((eq? var (car vars))
					(set! vals (cdr vals))
					(set vars (cdr vars))
				)
				(else (scan (cdr vars) (cdr vals)))
			)
		)
		(scan (frame-variables frame) (frame-values frame))		
	)
)