
;这一节理解地有些艰难，应该是因为对数字电路没概念所致
(load "/Users/fengli/Desktop/SICP Problem Sets/topic 3/3.28-3.30.scm")
(define (add-gate a1 a2 output)
	(define (add-gate-procedure)
		(let ((new-value (logical-and (get-signal a1) (get-signal a2))))
			(after-delay and-gate-delay 
				(lambda () 
					(set-signal! output new-value)
				)
			)
		)
	)
	(add-action! a1 add-gate-procedure)
	(add-action! a2 add-gate-procedure)
	'ok
)
(define (logical-and x y)
	(cond 
		((= x 1) (+ 0 y))
		(else 0)
	)
)

(define (inverter in out)
	(define (invert-procedure)
		(let ((new-value (logical-not (get-signal in))))
			(after-delay inverter-delay
				(lambda ()
					(set-signal! out new-value)
				)
			)
		)
	)
	(add-action! in invert-procedure)
)
(define (logical-not x y)
	(if (= x 1) 0 1)
)

(define (make-wire)
	(let ((signal-value 0) (action-procedures '()))
		(define (set-signal! new)
			(begin
				(set! signal-value new)
				(call-each action-procedures)
			)
			'done
		)
		(define (accept-action-procedure proc)
			(set! action-procedures (cons proc action-procedures))
			(proc)
		)
		(lambda (dispatch)
			(cond 
				((equal? dispatch 'get-signal) signal-value)
				((equal? dispatch 'add-action!) accept-action-procedure)
				((equal? dispatch 'set-signal!) set-signal!)
				(else (error "UNKNOWN OPERATION"))
			)
		)
	)
)

(define (get-signal wire) (wire 'get-signal))
(define (add-action! wire proc) ((wire 'add-action!) proc))
(define (set-signal! wire new) ((wire 'set-signal!) new-value))

(define (after-delay delay action)
	(add-to-agenda! (+ delay (current-time the-agenda)) 
		action
		the-agenda
	)
)

(define (propagete)
	(if (empty-agenda? the-agenda)
		'done
		(begin 
			(first-agenda-item the-agenda)
			(remove-first-agenda-item! the-agenda)
			(propagete)
		)
	)
)

(define (probe name wire)
	(add-action! wire 
		(lambda ()
			(
				(newline)
				(display name)
				(display "	")
				(display (current-time agenda))
				(display (get-signal wire))
			)
		)
	)
)

(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gete-dalay 4)

(define (make-time-segment time queue)
	(cons time queue)
)

(define (segment-time s)
	(car s)
)
(define (segment-queue s)
	(cdr s)
)
(define (make-agenda)
	(list 0)
)
(define (current-time agenda)
	(car agenda)
)
(define (segments agenda) (cdr agenda))
(define (set-current-time! agenda time)
	(set-car! agenda time)
)
(define (set-segments! agenda segments)
	(set-cdr! agenda segments)
)
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segment agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda)
	(null? (segments agenda))
)

(define (add-to-agenda time action agenda)
	(define (belongs-before? segments)
		(or (empty-agenda? agenda)
			(< time (segment-time (first-segment agenda)))
		)
	)
	(define (make-new-time-segment time action)
		(let (q (make-queue))
			(insert-queue! q action)
			(make-time-segment time q)
		)
	)
	(define (add-to-segments segments)
		(if (= (segment-time (car segments)) time)
			(insert-queue! (segment-queue (car segments))
				action
			)
			(let ((rest (cdr segments)))
				(if (belongs-before rest)
					(set-cdr! segments 
						(cons (make-new-time-segment time action)
							(cdr segments)
						)
					)
					(add-to-segments! rest)
				)
			)
		)
	)
	(let ((segments (segments agenda)))
		(if (belongs-before? segments)
			(set-segments! agenda
				(cons (make-new-time-segment time action)
					segments
				)
			)
			(add-to-segments segments)
		)
	)
)

(define (remove-first-agenda-item! ))

(define (remove-first-agenda-item! agenda)
	(let ((q (segment-queue (first-segment agenda))))
		(delete-queue! q)
		(if (empty-queue? q)
			(set-segments! agenda (rest-segment agenda))
		)
	)
)

(define (first-agenda-item agenda)
	(if (empty-agenda? agenda)
		(error "EMPTY AGENDA")
		(let ((first-seg (first-segment agenda)))
			(set! (current-time agenda) (segment-time first-seg))
			(front-queue (segment-queue first-seg))
		)
	)
)

